{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PolarGeosAI","text":"<p>Machine learning for satellite remote sensing in Python. Easy extraction and processing of matching GOES geostationary satellite and polar orbiting scatterometer data for model training.</p> <p></p>"},{"location":"#introduction","title":"Introduction","text":"<p>This package streamlines the process of extracting GOES satellite data that aligns in time and location with the orbit of a scatterometer satellite. By matching these datasets, parameters measured by the scatterometer can be used as training data for machine learning models based on GOES imagery.</p> <p>Key features of the package include:</p> <ul> <li>Efficient Data Extraction: Retrieves only the relevant portions of GOES data from AWS Open Data, avoiding the need to download entire large files.</li> <li>Automated Data Preparation: Prepares the extracted data for direct use in machine learning workflows.</li> <li>Flexible Output:</li> <li>Seamlessly integrates with pre-provided neural networks for training on selected data.</li> <li>Outputs can also be exported for use in other workflows or custom machine learning models.</li> </ul> <p>This package simplifies working with large GOES satellite datasets, making it easier to train and deploy machine learning models.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Examples/","title":"Examples","text":""},{"location":"Install/","title":"Install","text":"<p>PolarGeosAI can be installed via pip from PyPI</p> <pre><code>pip install polargeosai\n</code></pre> <p>(The package has not been uploaded yet, this will not work.)</p>"},{"location":"Install/#dependencies","title":"Dependencies","text":"<p>This package requires the following dependencies :</p> Package Version Numpy Pandas fsspec s3fs xarray sklearn tqdm pysolar Matplotlib"},{"location":"Quickstart/","title":"Quickstart","text":"<p>The following functions outline the main functionality of this Python package. The workflow that is recommended is :</p> <pre><code>graph LR\n  A[(Import Scatter Xarray)] --&gt; B[function : \nextract_scatter];\n  B --&gt;|use output| C[function:\nextract_goes];\n  C --&gt; D[function:\npackage_data];\n  B --&gt; D;\n  D --&gt; E[function: \nsave_data]\n  E --&gt; F{Data ready\nFor training model}</code></pre>"},{"location":"Quickstart/#extract_scatter","title":"extract_scatter","text":"<pre><code>extract_scatter(polar_data,start_datetime,end_datetime,lat_range,lon_range)\n</code></pre>"},{"location":"Quickstart/#description","title":"Description","text":"<p>This function extracts the scatterometer data from the polar_data dataset. The function extracts the scatterometer data for the given time range, latitude range and longitude range. The function then saves the data into 4 numpy files : time of observation, latitude, longitude and main variable.</p>"},{"location":"Quickstart/#parameters","title":"Parameters","text":"<pre><code>polar_data (xarray.Dataset): The scatterometer dataset (ASCAT, HYSCAT etc).\nstart_datetime (str): The start time of the data extraction in the format 'YYYY-MM-DD HH:MM:SS'.\nend_datetime (str): The end time of the data extraction in the format 'YYYY-MM-DD HH:MM:SS'.\nlat_range (list): The latitude range of the data extraction in the format [min_lat, max_lat].\nlon_range (list): The longitude range of the data extraction in the format [min_lon, max_lon].\nmain_variable (str): The main variable to be extracted. This can be wind_speed, wind_direction etc.\n</code></pre>"},{"location":"Quickstart/#returns","title":"returns","text":"<p>observation_times (numpy.ndarray): The time of observation of the scatterometer data.     observation_lats (numpy.ndarray): The latitude of the scatterometer data.     observation_lons (numpy.ndarray): The longitude of the scatterometer data.     observation_main_parameter (numpy.ndarray): The wind speed of the scatterometer data.</p>"},{"location":"Quickstart/#extract_goes","title":"extract_goes","text":"<pre><code>extract_goes(observation_times,observation_lats,obseration_lons,channels,polar_data)\n</code></pre>"},{"location":"Quickstart/#description_1","title":"Description","text":"<p>This function extracts the GOES data from the observation data provided by the extract_scatter function. These are observation times, latitudes, longitudes. The function will download the GOES data from the AWS S3 bucket and extract the data for the given observation times. The function will then subset the GOES data to the observation latitudes and longitudes. This will be done for all the channels provided in the channels list. The function will return a numpy array containing all channel images corresponding to the observation data.</p>"},{"location":"Quickstart/#parameters_1","title":"Parameters","text":"<pre><code>observation_times (numpy.ndarray): The times of observation of the scatterometer data.\nobservation_lats (numpy.ndarray): The latitudes of the scatterometer data.\nobservation_lons (numpy.ndarray): The longitudes of the scatterometer data.\nchannels (list): The channels of interest. multiple channels can be given in form ['C01', 'C02', etc]\npolar (xarray.Dataset): The scatterometer dataset (ASCAT, HYSCAT etc).\n</code></pre>"},{"location":"Quickstart/#returns_1","title":"Returns","text":"<pre><code>images (numpy.ndarray): The GOES images corresponding to the observation data.\n</code></pre>"},{"location":"Quickstart/#package_data","title":"package_data","text":"<pre><code>package_data(images, observation_lats, observation_lons, observation_times, observation_wind_speeds, filter=True, solar_conversion=True)\n</code></pre>"},{"location":"Quickstart/#description_2","title":"Description","text":"<p>This function packages the images and numerical data into a format that can be used for training a machine learning model. The function will filter out invalid images and fill in any NaN values. (Invalid images = empty images from GOES data) The function will also convert the observation times, latitudes and longitudes to solar angles (sza, saa) if solar_conversion is set to True. The function will return the images and numerical data in a numpy array format.</p>"},{"location":"Quickstart/#parameters_2","title":"Parameters","text":"<pre><code>images (numpy.ndarray): The GOES images corresponding to the observation data.\nobservation_lats (numpy.ndarray): The latitudes of the scatterometer data.\nobservation_lons (numpy.ndarray): The longitudes of the scatterometer data.\nobservation_times (numpy.ndarray): The times of observation of the scatterometer data.\nobservation_main_parameter (numpy.ndarray): the main parameter of the scatterometer data (the target of the model).\n</code></pre>"},{"location":"Quickstart/#returns_2","title":"Returns","text":"<pre><code>images (numpy.ndarray): The GOES images corresponding to the observation data.\nnumerical_data (numpy.ndarray): The numerical data corresponding to the observation data. (sza, saa, main_parameter if solar_conversion is set to True or lat, lon, time, wind_speeds if solar_conversion is set to False)\n</code></pre>"},{"location":"Quickstart/#save_data","title":"save_data","text":"<pre><code>save_data(images, numerical_data, polar_data, start_datetime, end_datetime,channels)\n</code></pre>"},{"location":"Quickstart/#description_3","title":"Description","text":"<p>The function will save the images and numerical data in a compressed numpy file format. The function will save the data in a folder called output_processed_data. The function will also save the data with the satellite name, channels, start and end datetime in the filename.</p>"},{"location":"Quickstart/#parameters_3","title":"Parameters","text":"<pre><code>images (numpy.ndarray): The GOES images corresponding to the observation data.\nnumerical_data (numpy.ndarray): The numerical data corresponding to the observation data.\npolar_data (xarray.Dataset): The scatterometer dataset (ASCAT, HYSCAT etc). Used for metadata.\nstart_datetime (str): The start time of the data extraction in the format 'YYYY-MM-DD HH:MM:SS'. Used for metadata\nend_datetime (str): The end time of the data extraction in the format 'YYYY-MM-DD HH:MM:SS'. Used for metadata\nchannels (list): The channels of interest. multiple channels can be given in form ['C01', 'C02', etc]. Used for metadata\n</code></pre>"},{"location":"Quickstart/#returns_3","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"User%20Guide/","title":"User Guide","text":""},{"location":"references/","title":"References","text":""}]}